'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _isFun = require('../utils/isFun');

var _isFun2 = _interopRequireDefault(_isFun);

var _log = require('../utils/log');

var _log2 = _interopRequireDefault(_log);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * props
 * {
 *  __map__ 父级组件传过来的地图实例
 * }
 */
var defaultOpts = {
  clickable: false,
  opacity: 1,
  visible: true
};

var configurableProps = ['opacity', 'src', 'bounds',

/* 扩展属性 */
'visible'];

var GroundImage = function (_React$Component) {
  _inherits(GroundImage, _React$Component);

  function GroundImage(props) {
    _classCallCheck(this, GroundImage);

    var _this = _possibleConstructorReturn(this, (GroundImage.__proto__ || Object.getPrototypeOf(GroundImage)).call(this, props));

    if (typeof window !== 'undefined') {
      if (!props.__map__) {
        _log2.default.warning('MAP_INSTANCE_REQUIRED');
      } else {
        _this.map = props.__map__;
        _this.element = _this.map.getContainer();
        _this.createGroundImage(props);
      }
    }
    return _this;
  }

  _createClass(GroundImage, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      return false;
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.map) {
        this.refreshGroundImage(nextProps);
      }
    }
  }, {
    key: 'refreshGroundImage',
    value: function refreshGroundImage(nextProps) {
      var _this2 = this;

      configurableProps.forEach(function (key) {
        if (key in nextProps) {
          if (_this2.checkPropsChanged(nextProps, key)) {
            if (key === 'visible') {
              _this2.setVisible(nextProps);
            } else if (key === 'opacity') {
              _this2.setOpacity(nextProps);
            } else if (key === 'src') {
              _this2.setImageUrl(nextProps);
            } else if (key === 'bounds') {
              _this2.setBounds(nextProps);
            }
          }
        }
      });
    }
  }, {
    key: 'setBounds',
    value: function setBounds(nextProps) {
      // 这个接口高德并未在文档中明确写出来，不确定后面会不会取消
      if ('setBounds' in this.image) {
        this.image.setBounds(this.buildBounds(nextProps));
      }
    }
  }, {
    key: 'setImageUrl',
    value: function setImageUrl(nextProps) {
      // 这个接口高德并未在文档中明确写出来，不确定后面会不会取消
      if ('setImageUrl' in this.image) {
        this.image.setImageUrl(nextProps.src);
      }
    }
  }, {
    key: 'setVisible',
    value: function setVisible(nextProps) {
      // 这个接口高德并未在文档中明确写出来，不确定后面会不会取消
      if ('show' in this.image) {
        if (nextProps.visible) {
          this.image.show();
        } else {
          this.image.hide();
        }
      }
    }
  }, {
    key: 'setOpacity',
    value: function setOpacity(nextProps) {
      this.image.setOpacity(nextProps.opacity);
    }
  }, {
    key: 'checkPropsChanged',
    value: function checkPropsChanged(nextProps, key) {
      // if (key === 'bounds') {
      //   return this.checkBoundsChange(nextProps);
      // }
      return this.props[key] !== nextProps[key];
    }
  }, {
    key: 'createGroundImage',
    value: function createGroundImage(props) {
      var src = void 0,
          bounds = void 0,
          opacity = void 0,
          clickable = void 0;
      if ('src' in props) {
        src = props.src;
      } else {
        _log2.default.warning('SRC_REQUIRED', true);
      }
      if ('bounds' in props) {
        bounds = this.buildBounds(props);
      } else {
        _log2.default.warning('BOUNDS_REQUIRED', true);
      }

      if ('clickable' in props) {
        clickable = props.clickable;
      } else {
        clickable = defaultOpts.clickable;
      }
      if ('opacity' in props) {
        opacity = props.opacity;
      } else {
        opacity = defaultOpts.opacity;
      }
      this.image = new window.AMap.GroundImage(src, bounds, {
        map: this.map,
        clickable: clickable,
        opacity: opacity
      });
      var events = this.exopseImageInstance(props);
      events && this.bindEvents(events);
    }
  }, {
    key: 'exopseImageInstance',
    value: function exopseImageInstance(props) {
      if ('events' in props) {
        var _events = props.events || {};
        if ((0, _isFun2.default)(_events.created)) {
          _events.created(this.image);
        }
        return _events;
      }
      return false;
    }
  }, {
    key: 'bindEvents',
    value: function bindEvents(events) {
      var _this3 = this;

      var list = Object.keys(events);
      list.length && list.forEach(function (evName) {
        if (evName !== 'created') {
          _this3.image.on(evName, events[evName]);
        }
      });
    }

    // checkBoundsChange(nextProps) {
    //   let changed = true;
    //   const nextBounds = this.buildBounds(nextProps);
    //   const curBounds = this.image.getBounds();
    //   if (
    //     curBounds.getNorthEast().equals(nextBounds.getNorthEast()) &&
    //     curBounds.getSouthWest().equals(nextBounds.getSouthWest())
    //   ) {
    //     changed = false;
    //   }
    //   return changed;
    // }

  }, {
    key: 'buildBounds',
    value: function buildBounds(props) {
      var rawBounds = props.bounds;
      if (!rawBounds) {
        return rawBounds;
      }
      if ('getSouthWest' in rawBounds) {
        return rawBounds;
      }
      var bounds = new window.AMap.Bounds(new window.AMap.LngLat(rawBounds.sw.longitude, rawBounds.sw.latitude), new window.AMap.LngLat(rawBounds.ne.longitude, rawBounds.ne.latitude));
      return bounds;
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.image.hide();
      this.image.setMap(null);
      delete this.image;
    }
  }]);

  return GroundImage;
}(React.Component);

exports.default = GroundImage;