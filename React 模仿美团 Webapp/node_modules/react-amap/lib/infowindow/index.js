'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _reactDom = require('react-dom');

var _isFun = require('../utils/isFun');

var _isFun2 = _interopRequireDefault(_isFun);

var _toCapitalString = require('../utils/toCapitalString');

var _toCapitalString2 = _interopRequireDefault(_toCapitalString);

var _log = require('../utils/log');

var _log2 = _interopRequireDefault(_log);

var _common = require('../utils/common');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * props
 * {
 *  __map__ 父级组件传过来的地图实例
 * }
 */

var Component = React.Component;

var configurableProps = ['content', 'position', 'size',
/* 以下属性是本插件的扩展 */
'visible',

/* 这个 setOffset  方法高德并没有明确在文档中列出来，不确定会不会撤销 */
'offset'];

var allProps = configurableProps.concat(['isCustom', 'autoMove', 'closeWhenClickMap', 'showShadow']);

var InfoWindow = function (_Component) {
  _inherits(InfoWindow, _Component);

  function InfoWindow(props) {
    _classCallCheck(this, InfoWindow);

    var _this = _possibleConstructorReturn(this, (InfoWindow.__proto__ || Object.getPrototypeOf(InfoWindow)).call(this, props));

    if (typeof window !== 'undefined') {
      if (!props.__map__) {
        _log2.default.warning('MAP_INSTANCE_REQUIRED');
      } else {
        _this.map = props.__map__;
        _this.element = _this.map.getContainer();
        _this.isCustom = true;
        _this.createInfoWindow(props);
      }
    }
    return _this;
  }

  _createClass(InfoWindow, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.map) {
        var props = this.props;
        if ('visible' in props) {
          if (props.visible) {
            this.showWindow();
            this.setClassName(props);
            this.setChild(props);
          } else {
            this.closeWindow();
          }
        }
      }
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      return false;
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.map) {
        this.refreshWindowLayout(nextProps);
      }
    }
  }, {
    key: 'createInfoWindow',
    value: function createInfoWindow(props) {
      var options = this.buildCreateOptions(props);
      this.infoWindow = new window.AMap.InfoWindow(options);
      var events = this.exposeWindowInstance(props);
      events && this.bindWindowEvents(events);
    }
  }, {
    key: 'refreshWindowLayout',
    value: function refreshWindowLayout(nextProps) {
      var _this2 = this;

      configurableProps.forEach(function (key) {
        if (key in nextProps) {
          if (_this2.checkPropChanged(key, nextProps)) {
            if (key === 'visible') {
              if (nextProps.visible) {
                _this2.showWindow();
              } else {
                _this2.closeWindow();
              }
            } else {
              var setterName = 'set' + (0, _toCapitalString2.default)(key);
              var setterValue = _this2.getSetterValue(key, nextProps[key]);
              _this2.infoWindow[setterName](setterValue);
            }
          }
        }
      });
      this.setChild(nextProps);
      this.setClassName(nextProps);
    }
  }, {
    key: 'checkPropChanged',
    value: function checkPropChanged(key, nextProps) {
      return this.props[key] !== nextProps[key];
    }
  }, {
    key: 'showWindow',
    value: function showWindow() {
      this.infoWindow.open(this.map, this.infoWindow.getPosition());
    }
  }, {
    key: 'closeWindow',
    value: function closeWindow() {
      this.infoWindow.close();
    }
  }, {
    key: 'buildCreateOptions',
    value: function buildCreateOptions(props) {
      var _this3 = this;

      var options = {};

      // 如果开发者没有设置 isCustom 属性，默认设置为 false
      if ('isCustom' in props) {
        options.isCustom = !!props.isCustom;
      } else {
        options.isCustom = false;
      }

      if ('content' in props) {
        options.content = props.content;
      } else {
        this.infoDOM = document.createElement('div');
        options.content = this.infoDOM;
      }

      // if (options.isCustom) {
      //   if ('content' in props) {
      //     options.content = props.content;
      //     console.warn('更推荐不定义 content（默认），组件内部的实现可以直接以 JSX 语法写窗体内容。');
      //   } else {
      //     this.infoDOM = document.createElement('div');
      //     options.content = this.infoDOM;
      //   }
      // } else {
      //   if ('content' in options) {
      //     options.content = props.content;
      //     console.warn('更推荐设置 isCustom 为 true 可以直接以 JSX 语法写窗体内容。')
      //   } else {
      //     //
      //   }
      // }
      allProps.forEach(function (key) {
        if (key in props) {
          if (['visible', 'isCustom', 'content'].indexOf(key) === -1) {
            options[key] = _this3.getSetterValue(key, props[key]);
          }
        }
      });
      return options;
    }
  }, {
    key: 'getSetterValue',
    value: function getSetterValue(key, value) {
      if (key === 'size') {
        return (0, _common.getAMapSize)(value);
      }
      if (key === 'offset') {
        return (0, _common.getAMapPixel)(value);
      }
      if (key === 'position') {
        return (0, _common.getAMapPosition)(value);
      }
      return value;
    }
  }, {
    key: 'exposeWindowInstance',
    value: function exposeWindowInstance(props) {
      if ('events' in props) {
        var _events = props.events || {};
        if ((0, _isFun2.default)(_events.created)) {
          _events.created(this.infoWindow);
        }
        delete _events.created;
        return _events;
      }
      return false;
    }
  }, {
    key: 'bindWindowEvents',
    value: function bindWindowEvents(events) {
      var _this4 = this;

      var list = Object.keys(events);
      list.length && list.forEach(function (evName) {
        _this4.infoWindow.on(evName, events[evName]);
      });
    }
  }, {
    key: 'setChild',
    value: function setChild(props) {
      var child = props.children;
      if (this.infoDOM && child) {
        (0, _reactDom.render)(React.createElement(
          'div',
          null,
          child
        ), this.infoDOM);
      } else {
        if (props.children) {
          console.warn('因为你设置 isCustom 为 true，InfoWindow 的 Children 被忽略');
        }
      }
    }
  }, {
    key: 'setClassName',
    value: function setClassName(props) {
      var baseClsValue = '';
      if (props.isCustom === true) {
        baseClsValue = 'amap_markers_pop_window ';
      }
      if (this.infoDOM) {
        // 刷新 className
        if ('className' in props && props.className) {
          baseClsValue += props.className;
        }
        this.infoDOM.className = baseClsValue;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return InfoWindow;
}(Component);

exports.default = InfoWindow;